"use strict";
/* eslint-disable no-nested-ternary */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const webpack_1 = __importDefault(require("webpack"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
const webpack_bundle_analyzer_1 = require("webpack-bundle-analyzer");
const nimbus_common_1 = require("@airbnb/nimbus-common");
const InlineManifestPlugin_1 = __importDefault(require("./plugins/InlineManifestPlugin"));
const helpers_1 = require("./helpers");
function getConfig({ analyzeBundle = false, buildFolder = 'public', parallel = true, port = helpers_1.PORT, react = false, root = helpers_1.ROOT, sourceMaps = false, srcFolder, }) {
    const srcPath = path_1.default.join(root, srcFolder);
    const publicPath = path_1.default.join(root, buildFolder);
    const entry = [srcPath];
    const plugins = [
        new webpack_1.default.NamedChunksPlugin(),
        new webpack_1.default.EnvironmentPlugin({
            LAZY_LOAD: false,
            RENDER_ENV: 'browser',
            SILENCE_POLYGLOT_WARNINGS: true,
            SENTRY_RELEASE: helpers_1.PROD ? nimbus_common_1.getCommitHash() || 'production' : 'development',
            AMP: false,
        }),
        new webpack_1.default.DefinePlugin({
            __DEV__: JSON.stringify(!helpers_1.PROD),
        }),
        new html_webpack_plugin_1.default({
            chunks: ['runtime', 'core'],
            template: `${srcFolder}/index.html`,
            filename: 'index.html',
            favicon: helpers_1.getFavIcon(srcPath),
        }),
    ];
    if (analyzeBundle) {
        plugins.push(new webpack_bundle_analyzer_1.BundleAnalyzerPlugin());
    }
    if (helpers_1.PROD) {
        plugins.push(
        // Inline the runtime chunk to enable long-term caching
        new InlineManifestPlugin_1.default());
    }
    else if (react) {
        plugins.push(
        // Enable hot module replacement
        new webpack_1.default.HotModuleReplacementPlugin());
    }
    return {
        mode: helpers_1.PROD ? 'production' : 'development',
        bail: helpers_1.PROD,
        context: root,
        entry: {
            core: entry,
        },
        plugins,
        module: {
            rules: [
                {
                    test: nimbus_common_1.TJSX_EXT_PATTERN,
                    include: [srcPath],
                    exclude: /node_modules/,
                    use: {
                        loader: 'babel-loader',
                        options: {
                            cacheDirectory: true,
                            configFile: true,
                        },
                    },
                },
                {
                    test: nimbus_common_1.ASSET_EXT_PATTERN,
                    use: {
                        loader: 'url-loader',
                        options: {
                            limit: 1000,
                            name: 'assets/[name].[ext]?[hash:7]',
                            publicPath: '/',
                        },
                    },
                },
                {
                    test: nimbus_common_1.GQL_EXT_PATTERN,
                    use: {
                        loader: 'webpack-graphql-loader',
                        options: {
                            output: 'document',
                            removeUnusedFragments: true,
                        },
                    },
                },
            ],
        },
        resolve: {
            alias: helpers_1.getESMAliases(),
            extensions: ['.wasm', '.mjs', ...nimbus_common_1.EXTS],
        },
        output: {
            path: publicPath,
            publicPath: '/',
            filename: helpers_1.PROD ? 'assets/[name].[contenthash].js' : 'assets/[name].js',
            chunkFilename: helpers_1.PROD ? 'assets/[name].[contenthash].chunk.js' : 'assets/[name].[id].js',
            sourceMapFilename: '[file].map',
        },
        devtool: helpers_1.PROD ? (sourceMaps ? 'source-map' : false) : 'cheap-module-source-map',
        // @ts-ignore
        devServer: {
            compress: true,
            contentBase: publicPath,
            disableHostCheck: true,
            headers: {
                'Service-Worker-Allowed': '/',
            },
            historyApiFallback: true,
            hot: true,
            port,
            watchOptions: {
                ignored: /node_modules/,
            },
        },
        optimization: {
            runtimeChunk: 'single',
            minimize: helpers_1.PROD,
            minimizer: [
                new terser_webpack_plugin_1.default({
                    sourceMap: sourceMaps,
                    parallel: helpers_1.getParallelValue(parallel),
                }),
            ],
        },
        performance: false,
        stats: !helpers_1.PROD,
    };
}
exports.getConfig = getConfig;
